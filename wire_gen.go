// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/MuxiKeStack/be-question/grpc"
	"github.com/MuxiKeStack/be-question/ioc"
	"github.com/MuxiKeStack/be-question/pkg/grpcx"
	"github.com/MuxiKeStack/be-question/repository"
	"github.com/MuxiKeStack/be-question/repository/cache"
	"github.com/MuxiKeStack/be-question/repository/dao"
	"github.com/MuxiKeStack/be-question/service"
)

// Injectors from wire.go:

func InitGRPCServer() grpcx.Server {
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	questionDAO := dao.NewGORMQuestionDAO(db)
	cmdable := ioc.InitRedis()
	questionCache := cache.NewRedisQuestionCache(cmdable)
	questionRepository := repository.NewCachedQuestionRepository(questionDAO, questionCache, logger)
	client := ioc.InitEtcdClient()
	courseServiceClient := ioc.InitCourseClient(client)
	saramaClient := ioc.InitKafka()
	producer := ioc.InitProducer(saramaClient)
	v := ioc.InitSvcHandlers(courseServiceClient, producer)
	questionService := service.NewQuestionService(questionRepository, v)
	questionServiceServer := grpc.NewQuestionServiceServer(questionService)
	server := ioc.InitGRPCxKratosServer(questionServiceServer, client, logger)
	return server
}
